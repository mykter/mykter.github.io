---
layout: post
title:  "afl-fuzz on ppc"
date:   2016-04-27
categories: fuzzing
---
afl-fuzz gives you great fuzzer coverage for very little investment of development time. Its primary target platform is Linux on x86 / x86-64, however since the introduction of LLVM mode / afl-clang-fast, [the docs][llvm-mode] (link is to an unofficial mirror) offer some hope for those of us working on less mainstream architectures:

> The instrumentation is CPU-independent. At least in principle, you should
> be able to rely on it to fuzz programs on non-x86 architectures (after
> building afl-fuzz with `AFL_NOX86=1`).

This is, however, the grand total of the documentation available for using afl on other architectures. I'm pleased to report that it doesn't just work in principle, but in practice too, though it's not necessarily straight forward. Here is what I did to start fuzzing with afl when cross compiling for a 32bit PowerPC target.

1. Will be replaced with the ToC
{:toc}

## Prerequisites
For this to work you need to be able to compile the software to be fuzzed with vanilla clang and successfully run it on the target. How you do this depends on your software, see below for some difficulties I encountered.

Then you need to compile and install the afl LLVM mode compilers in the usual fashion from the llvm-mode directory: make / make install. This installs afl-clang-fast (compiled for your host system) in /usr/local.

## Aside: cross compilation with clang
This isn't afl specific, but is another problem I needed to solve before I could use afl's llvm mode compiler.

On the one hand, cross compiling with clang is a breeze because it has built in support for it - you don't need to compile a dedicated cross-compiler for the job. On the other hand....

With gcc cross compilation we normally specify two different paths - the sysroot for the target headers, and the path to the host's cross compilation tools. clang doesn't support this concept properly, having only the concept of the sysroot where it expects everything to be. As clang doesn't have full support for cross compiling to ppc, it still needs to use your cross-tools version of ld and as. To fix this you can use the undocumented `-B` switch which instructs clang to search for its guts there first, before its standard paths. Very unsatisfactory, but it does work. You get an invocation that looks like this:

{% highlight shell %}
clang -target magic-target-triple -B /path/to/cross/tools/dir -mcpu=<mycpu> \
 --sysroot=/path/to/sysroot -o myExec myExec.c
{% endhighlight %}

Actually working out the correct magic-target-triple was far harder than it should have been. Hopefully [these improvements][target-triple] to clang will be implemented to help you enumerate the supported targets - until then, searching + guessing was all I had. 32bit ppc target triples seem take the form `powerpc-<vendor>-linux`.

If you're cross compiling for a target that has full support in llvm then this should be a lot easier.

## Cross compile afl-fuzz and the afl runtime
Now we need two things that are compiled to run on the ppc target: afl-fuzz (and any other utilities like afl-whatsup); and the tiny blob of afl code that afl-clang-fast will add to every object you compile. The appropriate invocation to cross compile afl-fuzz will look something like:

    CC="clang" CFLAGS="-O3 -funroll-loops -target magic-target-triple -m32 \
     -mcpu=<mycpu> --sysroot=/path/to/my/sysroot -B /path/to/cross/tools/dir" \
     AFL_NOX86=1 make

Then to make the blob that gets added to your code, `afl-llvm-rt.o`, we go back to the llvm-mode folder and use the same `CFLAGS` but don't specify CC (can't remember why this was - but it didn't work with CC="clang"). Then manually install this object so afl-clang-fast picks it up, not the x86 variant that came with the original install:
    
{% highlight shell %}
sudo install -m 755 ../afl-llvm-rt.o /usr/local/lib/afl/
{% endhighlight %}

## Usage
At this point everything just works. Cross compile your target software, e.g. with `CC="afl-clang-fast" make`, copy the binaries and afl-fuzz over to the target, and run under afl in the normal way.

Of course your locally installed version of `afl-clang-fast` will now compile in object code for the target architecture, not your host architecture, so don't expect it to work for local testing! You could presumably adapt this procedure dropping the `make install` steps to avoid this issue.

## Summary
You can use afl in a cross-compilation setting, but need to (a) be able to cross compile for your target with clang, and (b) compile in the target architecture variant of afl-llvm-rt.o to your host version of afl-clang-fast. afl-fuzz and other utilities compiled for ppc can then be copied on to the target, enabling you to start torturing non-x86 software.


[llvm-mode]:https://github.com/rc0r/afl-fuzz/tree/master/llvm_mode 
[target-triple]:http://llvm.org/devmtg/2014-04/PDFs/LightningTalks/2014-3-31_ClangTargetSupport_LighteningTalk.pdf
